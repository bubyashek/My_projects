// Mixin for creating cards with shadow
@mixin card-style($padding: $spacing-lg, $shadow: $shadow-md) {
  background: white;
  padding: $padding;
  border-radius: $border-radius-lg;
  box-shadow: $shadow;
  transition: $transition-base;
  
  &:hover {
    box-shadow: $shadow-lg;
    transform: translateY(-2px);
  }
}

// Mixin for status badges
@mixin status-badge($bg-color, $text-color: white) {
  display: inline-block;
  padding: $spacing-xs $spacing-sm;
  background-color: $bg-color;
  color: $text-color;
  border-radius: $border-radius-md;
  font-size: $font-size-sm;
  font-weight: 600;
  text-transform: uppercase;
}

// Mixin for buttons
@mixin button-style($bg-color, $text-color: white, $hover-color: null) {
  padding: $spacing-sm $spacing-lg;
  background-color: $bg-color;
  color: $text-color;
  border: none;
  border-radius: $border-radius-md;
  cursor: pointer;
  font-weight: 500;
  transition: $transition-base;
  
  @if $hover-color {
    &:hover {
      background-color: $hover-color;
    }
  } @else {
    &:hover {
      background-color: darken($bg-color, 10%);
    }
  }
  
  &:active {
    transform: scale(0.98);
  }
  
  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
}

// Mixin for flexbox centering
@mixin flex-center($direction: row) {
  display: flex;
  flex-direction: $direction;
  justify-content: center;
  align-items: center;
}

// Mixin for responsive images
@mixin responsive-image($max-width: 100%) {
  max-width: $max-width;
  height: auto;
  display: block;
}

// Mixin for truncating text
@mixin truncate-text($lines: 1) {
  @if $lines == 1 {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  } @else {
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
}

// Mixin for creating grid layouts
@mixin grid-layout($columns: 3, $gap: $spacing-lg) {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  gap: $gap;
  
  @media (max-width: $breakpoint-md) {
    grid-template-columns: repeat(2, 1fr);
  }
  
  @media (max-width: $breakpoint-sm) {
    grid-template-columns: 1fr;
  }
}

// Function for calculating average
@function average($x, $y) {
  @return ($x + $y) / 2;
}

// Function for lighten color
@function lighten-color($color, $amount: 10%) {
  @return lighten($color, $amount);
}


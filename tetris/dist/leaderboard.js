// –°–∏—Å—Ç–µ–º–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–æ–≤ –¥–ª—è –∏–≥—Ä—ã Tetris
const LEADERBOARD_KEY = 'tetris.leaderboard';
const MAX_ENTRIES = 10;
export class Leaderboard {
    constructor() {
        this.entries = [];
        this.load();
    }
    // –ó–∞–≥—Ä—É–∑–∫–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –∏–∑ localStorage
    load() {
        const data = localStorage.getItem(LEADERBOARD_KEY);
        if (data) {
            try {
                this.entries = JSON.parse(data);
            }
            catch (e) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:', e);
                this.entries = [];
            }
        }
    }
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –≤ localStorage
    save() {
        try {
            localStorage.setItem(LEADERBOARD_KEY, JSON.stringify(this.entries));
            console.log('–õ–∏–¥–µ—Ä–±–æ—Ä–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', this.entries);
        }
        catch (e) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:', e);
        }
    }
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    addEntry(name, score, level) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        const existingBest = this.getPlayerBest(name);
        if (existingBest && existingBest.score >= score) {
            console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç ${name}: ${score} –æ—á–∫–æ–≤ - –Ω–µ –ø–æ–±–∏—Ç –ª–∏—á–Ω—ã–π —Ä–µ–∫–æ—Ä–¥ (${existingBest.score})`);
            return false; // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º, —Ç–∞–∫ –∫–∞–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ö—É–∂–µ
        }
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        this.entries = this.entries.filter(e => e.name !== name);
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        const entry = {
            name,
            score,
            level,
            date: new Date().toLocaleDateString('ru-RU')
        };
        this.entries.push(entry);
        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—á–µ—Ç–∞
        this.entries.sort((a, b) => b.score - a.score);
        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-N –∑–∞–ø–∏—Å–µ–π
        const wasInTop = this.entries.indexOf(entry) < MAX_ENTRIES;
        this.entries = this.entries.slice(0, MAX_ENTRIES);
        this.save();
        if (existingBest) {
            console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç ${name}: ${score} –æ—á–∫–æ–≤ - –Ω–æ–≤—ã–π –ª–∏—á–Ω—ã–π —Ä–µ–∫–æ—Ä–¥! (–±—ã–ª–æ: ${existingBest.score})${wasInTop ? ' - –ø–æ–ø–∞–ª –≤ —Ç–æ–ø!' : ''}`);
        }
        else {
            console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç ${name}: ${score} –æ—á–∫–æ–≤ - –ø–µ—Ä–≤–∞—è –∏–≥—Ä–∞!${wasInTop ? ' - –ø–æ–ø–∞–ª –≤ —Ç–æ–ø!' : ''}`);
        }
        return wasInTop;
    }
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
    getEntries() {
        return [...this.entries];
    }
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø-N –∑–∞–ø–∏—Å–µ–π
    getTopEntries(limit = MAX_ENTRIES) {
        return this.entries.slice(0, limit);
    }
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–ø–∞–ª –ª–∏ —Å—á–µ—Ç –≤ —Ç–æ–ø
    isTopScore(score) {
        if (this.entries.length < MAX_ENTRIES) {
            return true;
        }
        return score > this.entries[MAX_ENTRIES - 1].score;
    }
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
    getPosition(score) {
        for (let i = 0; i < this.entries.length; i++) {
            if (score >= this.entries[i].score) {
                return i + 1;
            }
        }
        return this.entries.length + 1;
    }
    // –û—á–∏—Å—Ç–∫–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    clear() {
        this.entries = [];
        this.save();
        console.log('–õ–∏–¥–µ—Ä–±–æ—Ä–¥ –æ—á–∏—â–µ–Ω');
    }
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä–æ–∫–∞
    getPlayerBest(name) {
        const playerEntries = this.entries.filter(e => e.name === name);
        if (playerEntries.length === 0) {
            return null;
        }
        return playerEntries[0]; // –£–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    }
}
// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –≤ HTML
export function renderLeaderboard(leaderboard, containerId) {
    const container = document.getElementById(containerId);
    if (!container) {
        console.error(`–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ${containerId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return;
    }
    const entries = leaderboard.getTopEntries();
    if (entries.length === 0) {
        container.innerHTML = '<p class="no-entries">–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.<br>–°—ã–≥—Ä–∞–π—Ç–µ –ø–µ—Ä–≤—ã–º!</p>';
        return;
    }
    let html = '<div class="leaderboard-list">';
    entries.forEach((entry, index) => {
        const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : '';
        const positionClass = index < 3 ? `position-${index + 1}` : '';
        html += `
            <div class="leaderboard-entry ${positionClass}">
                <span class="position">${medal || (index + 1)}</span>
                <span class="player-name">${escapeHtml(entry.name)}</span>
                <span class="player-stats">
                    <span class="score">${entry.score}</span>
                    <span class="level">—É—Ä. ${entry.level}</span>
                </span>
            </div>
        `;
    });
    html += '</div>';
    container.innerHTML = html;
}
// –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}
